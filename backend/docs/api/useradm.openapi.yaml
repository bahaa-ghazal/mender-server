openapi: 3.0.1
info:
  title: User administration and authentication
  description: |
    An API for user administration and user authentication handling. Intended for use by the web GUI.
    All responses from the API will contain 'X-MEN-RequestID' header with server-side generated request ID.
  version: "1"
servers:
- url: https://hosted.mender.io
  description: Management server
- url: http://mender-useradm:8080
  description: Internal server
tags:
  - name: Useradm Internal API
  - name: Useradm Management API v1
paths:
  /api/management/v1/useradm/auth/login:
    post:
      tags:
      - Useradm Management API v1
      summary: Log in to Mender
      description: |
        Accepts user credentials via standard Basic Auth, and returns a
        JWT token to be used for authentication in subsequent requests.
      operationId: Login
      requestBody:
        description: Log in options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginOptions'
        required: false
      responses:
        "200":
          description: |
            Authentication successful - a new JWT is issued and returned.
            The JWT is signed with the API's private key ('RS256' signing algorithm),
            and contains the following standard claims:
            * 'iss' - issuer
            * 'exp' - expiry date
            * 'sub' - unique, autogenerated user ID
            * 'scp' - 'mender.*', allows access to all APIs/methods
          content:
            application/jwt:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
        "400":
          description: "Bad request, see error message for details."
          content:
            application/jwt:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/jwt:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/jwt:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - Login: []
  /api/management/v1/useradm/auth/logout:
    post:
      tags:
      - Useradm Management API v1
      summary: Log out from Mender
      description: |
        Invalidates the JWT token of the current user.
      operationId: Logout
      responses:
        "202":
          description: |
            Request has been accepted and the JWT token has been invalidated.
          content: {}
        "400":
          description: "Bad request, see error message for details."
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/users:
    get:
      tags:
      - Useradm Management API v1
      summary: |
        List all users registered under the tenant owning the JWT.
      operationId: List Users Management
      parameters:
      - name: id
        in: query
        description: |
          Limit result by user ID, can be repeated to include multiple users in the query.
        schema:
          type: string
      - name: email
        in: query
        description: |
          Limit result by user email, can be repeated to include multiple users in the query.
        schema:
          type: string
      - name: created_after
        in: query
        description: |
          Filter users created after timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: created_before
        in: query
        description: |
          Filter users created before timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: updated_after
        in: query
        description: |
          Filter users updated after timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: updated_before
        in: query
        description: |
          Filter users updated before timestamp (UNIX timestamp).
        schema:
          type: integer
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                title: ListOfUsers
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    post:
      tags:
      - Useradm Management API v1
      summary: |
        Create a new user under the tenant owning the JWT.
      operationId: Create User Management
      requestBody:
        description: New user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNew'
        required: true
      responses:
        "201":
          description: The user was successfully created.
          headers:
            Location:
              description: URI for the newly created 'User' resource.
              schema:
                type: string
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "422":
          description: |
            The email address is duplicated, password is too short or current password doesn't match.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/users/{id}:
    get:
      tags:
      - Useradm Management API v1
      summary: Get user information
      operationId: Show User
      parameters:
      - name: id
        in: path
        description: User id.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response - a user information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "404":
          description: The user was not found.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    put:
      tags:
      - Useradm Management API v1
      summary: Update user information
      operationId: Update User
      parameters:
      - name: id
        in: path
        description: User id.
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "204":
          description: User information updated.
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "404":
          description: |
            The user does not exist.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "422":
          description: |
            The email address is duplicated, the password is too short
            or the user is trying to modify another user's password.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    delete:
      tags:
      - Useradm Management API v1
      summary: Remove user from the system
      operationId: Remove User
      parameters:
      - name: id
        in: path
        description: User id.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User removed.
          content: {}
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/users/me:
    get:
      tags:
      - Useradm Management API v1
      summary: Get user information
      operationId: Show Own User Data
      responses:
        "200":
          description: Successful response - a user information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "404":
          description: The user was not found.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    put:
      tags:
      - Useradm Management API v1
      summary: Update own user information
      operationId: Update Own User Data
      requestBody:
        description: Updated user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "204":
          description: User information updated.
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "404":
          description: |
            The user does not exist.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "422":
          description: |
            The email address is duplicated or the password is too short.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/settings:
    get:
      tags:
      - Useradm Management API v1
      summary: Get global user settings
      operationId: Show User Settings
      responses:
        "200":
          description: Successful response - a user information is returned.
          headers:
            ETag:
              description: |
                Contains the device object's current ETag.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    post:
      tags:
      - Useradm Management API v1
      summary: Set global user settings
      description: |
        Create global user settings or replace existing settings with provided object.
      operationId: Update User Settings
      parameters:
      - name: If-Match
        in: header
        description: "Contains the settings' current ETag, and performs the update\
          \ only if it matches the one stored in the database."
        schema:
          type: string
      requestBody:
        description: New user settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        "201":
          description: User settings set.
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "412":
          description: ETag doesn't match.
          content: {}
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/settings/me:
    get:
      tags:
      - Useradm Management API v1
      summary: Get user settings for the current user
      operationId: Show My User Settings
      responses:
        "200":
          description: Successful response - a user information is returned.
          headers:
            ETag:
              description: |
                Contains the device object's current ETag.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    post:
      tags:
      - Useradm Management API v1
      summary: Set user settings for the current user
      description: |
        Create current user settings or replace existing settings with provided object.
      operationId: Update My User Settings
      parameters:
      - name: If-Match
        in: header
        description: "Contains the settings' current ETag, and performs the update\
          \ only if it matches the one stored in the database."
        schema:
          type: string
      requestBody:
        description: New user settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        "201":
          description: User settings set.
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "412":
          description: ETag doesn't match.
          content: {}
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/settings/tokens:
    get:
      tags:
      - Useradm Management API v1
      summary: Get user Personal Access Tokens
      operationId: List User Personal Access Tokens
      responses:
        "200":
          description: Endpoint returns a list of tokens.
          content:
            application/json:
              schema:
                title: ListOfTokens
                type: array
                items:
                  $ref: '#/components/schemas/PersonalAccessToken'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
    post:
      tags:
      - Useradm Management API v1
      summary: Create new Personal Access Token
      description: |
        Create new Personal Access Token with given name and expiration.
      operationId: Create Personal Access Token
      requestBody:
        description: The token object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessTokenRequest'
        required: true
      responses:
        "200":
          description: Token has been created.
          content:
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
        "400":
          description: |
            The request body is malformed or expiration time is too big.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "409":
          description: |
            Personal Access Token with the same name already exists.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "422":
          description: |
            Maximum number of Personal Acess Tokens reached for this user.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/settings/tokens/{id}:
    delete:
      tags:
      - Useradm Management API v1
      summary: Revoke Personal Access Token
      operationId: Revoke Personal Access Token
      parameters:
      - name: id
        in: path
        description: Token identifier.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Token removed.
          content: {}
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/plans:
    get:
      tags:
      - Useradm Management API v1
      summary: Get list of available plans
      operationId: List Plans
      parameters:
      - name: page
        in: query
        description: Starting page.
        schema:
          type: number
          format: integer
          default: 1.0
      - name: per_page
        in: query
        description: Maximum number of results per page.
        schema:
          maximum: 500
          type: number
          format: integer
          default: 20.0
      responses:
        "200":
          description: Successful response - list of plans is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/management/v1/useradm/plan_binding:
    get:
      tags:
      - Useradm Management API v1
      summary: Get plan and limits information for current tenant
      operationId: Show Plan And Limits
      responses:
        "200":
          description: Successful response - a plan information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanBindingDetails'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
      security:
      - ManagementJWT: []
  /api/internal/v1/useradm/health:
    get:
      tags:
      - Useradm Internal API
      summary: Check the health of the service
      operationId: Check Health
      responses:
        "204":
          description: |
            Service is healthy and all dependencies are up and running.
          content: {}
        "500":
          description: |
            Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
              example:
                error: internal error
                request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
        "503":
          description: |
            Service unhealthy / not ready to accept traffic. At least one dependency is not running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
              example:
                error: "error reaching MongoDB: context deadline exceeded"
                request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
  /api/internal/v1/useradm/alive:
    get:
      tags:
      - Useradm Internal API
      summary: |
        Trivial endpoint that unconditionally returns an empty 200 response whenever the API handler is running correctly.
      operationId: Check Liveliness
      responses:
        "204":
          description: Service is up and running.
          content: {}
        "500":
          description: |
            Internal API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
  /api/internal/v1/useradm/auth/verify:
    post:
      tags:
      - Useradm Internal API
      summary: Check the validity of a token
      description: |
        Besides the basic validity check, checks the token expiration time and user-initiated token revocation.
        Services which intend to use it should be correctly set up in the gateway's configuration.
      operationId: Verify JWT
      parameters:
      - name: Authorization
        in: header
        description: The token in base64-encoded form.
        required: true
        schema:
          type: string
          format: "Bearer [token]"
      - name: X-Forwarded-Uri
        in: header
        description: |
          URI the original request was sent to, the URI is expected to have
          at least 4 components, eg. /api/management/1.0/foo/bar
        required: true
        schema:
          type: string
          format: HTTP path
      - name: X-Forwarded-Method
        in: header
        description: HTTP method used when accessing the original URI
        required: true
        schema:
          type: string
          enum:
          - GET
          - PUT
          - POST
          - DELETE
      responses:
        "200":
          description: The token is valid.
          content: {}
        "400":
          description: Missing or malformed request parameters.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "401":
          description: "Verification failed, authentication should not be granted."
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "403":
          description: Token has expired - apply for a new one.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
  /api/internal/v1/useradm/tenants:
    post:
      tags:
      - Useradm Internal API
      summary: Create a tenant with provided configuration.
      operationId: Create Tenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantNew'
        required: true
      responses:
        "201":
          description: The tenant was created successfully.
          content: {}
        "400":
          description: Missing or malformed request parameters.
          content: {}
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
  /api/internal/v1/useradm/tenants/{tenant_id}/users:
    get:
      tags:
      - Useradm Internal API
      summary: |
        List all users registered under the tenant owning the JWT.
      operationId: List Users Internal
      parameters:
      - name: tenant_id
        in: path
        description: Tenant ID.
        required: true
        schema:
          type: string
      - name: id
        in: query
        description: |
          Limit result by user ID, can be repeated to include multiple users in the query.
        schema:
          type: string
      - name: email
        in: query
        description: |
          Limit result by user email, can be repeated to include multiple users in the query.
        schema:
          type: string
      - name: created_after
        in: query
        description: |
          Filter users created after timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: created_before
        in: query
        description: |
          Filter users created before timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: updated_after
        in: query
        description: |
          Filter users updated after timestamp (UNIX timestamp).
        schema:
          type: integer
      - name: updated_before
        in: query
        description: |
          Filter users updated before timestamp (UNIX timestamp).
        schema:
          type: integer
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                title: ListOfUsers
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          description: |
            The user cannot be granted authentication.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
    post:
      tags:
      - Useradm Internal API
      summary: Create user
      operationId: Create User Internal
      parameters:
      - name: tenant_id
        in: path
        description: Tenant ID.
        required: true
        schema:
          type: string
      requestBody:
        description: New user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNewInternal'
        required: true
      responses:
        "201":
          description: The user was successfully created.
          content: {}
        "400":
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "404":
          description: |
            Tenant with given ID does not exist.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "422":
          description: |
            User name or ID is duplicated.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
  /api/internal/v1/useradm/tenants/{tenant_id}/users/{user_id}:
    delete:
      tags:
      - Useradm Internal API
      summary: Delete a user
      description: |
        Remove a user from the tenant.
      operationId: Delete User Internal
      parameters:
      - name: tenant_id
        in: path
        description: Tenant ID.
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: User ID.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User deleted.
          content: {}
        "400":
          description: |
            Invalid parameters.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
  /api/internal/v1/useradm/tokens:
    delete:
      tags:
      - Useradm Internal API
      summary: Delete all user tokens
      description: |
        This endpoint is designed to be used for tenant account suspension purpose.
        When only tenant_id parameter is set, tokens for all tenant users will be removed.
        It is also possible to remove tokens for user with given user_id by setting
        optional user_id parameter.
      operationId: Revoke User Tokens
      parameters:
      - name: tenant_id
        in: query
        description: Tenant ID.
        required: true
        schema:
          type: string
      - name: user_id
        in: query
        description: User ID.
        schema:
          type: string
      responses:
        "204":
          description: Tokens deleted.
          content: {}
        "400":
          description: |
            Invalid parameters.
          content:
            application/json:
              schema:
                $ref: './common/schemas.yaml#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalAPI'
components:
  schemas:
    LoginOptions:
      type: object
      properties:
        no_expiry:
          type: boolean
          description: Generate a JWT token with no expiration date.
      description: Log in options
      example:
        no_expiry: true
    UserNew:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: A unique email address. Non-ascii characters are invalid.
        password:
          type: string
          description: Password.
      description: New user descriptor.
      example:
        email: user@acme.com
        password: mypass1234
    UserNewInternal:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: A unique email address. Non-ascii characters are invalid.
        password:
          type: string
          description: Password.
        propagate:
          type: boolean
          description: |
            This paramter is deprecated _since Thu Jul 6 2023_, the propagation
            of user information to tenantadm is disabled permanently.
      description: New user descriptor.
      example:
        email: user@acme.com
        password: mypass1234
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          description: A unique email address.
        password:
          type: string
          description: New password.
        current_password:
          type: string
          description: Current password.
      description: Update user information.
      example:
        email: new_email@acme.com
        password: new password
        current_password: old password
    User:
      required:
      - email
      - id
      type: object
      properties:
        email:
          type: string
          description: A unique email address.
        id:
          type: string
          description: User Id.
        created_ts:
          type: string
          description: |
            Server-side timestamp of the user creation.
          format: date-time
        updated_ts:
          type: string
          description: |
            Server-side timestamp of the last user information update.
          format: date-time
        login_ts:
          type: string
          description: Timestamp of last successful login.
          format: date-time
      description: User descriptor.
      example:
        email: user@acme.com
        id: 806603def19d417d004a4b67e
        created_ts: 2020-07-06T15:04:49.114046203+02:00
        updated_ts: 2020-07-07T01:04:49.114046203+02:00
    PersonalAccessTokenRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of a token.
        expires_in:
          type: number
          description: |
            Expiration time in seconds (maximum one year - 31536000s).
            If you omit it or set it to zero, the Personal Access Token will never expire.
      description: Personal Access Token Request.
      example:
        name: my_personal_token
        expires_in: 28800
    PersonalAccessToken:
      required:
      - created_ts
      - expiration_date
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Token identifier.
        name:
          type: string
          description: Name of a token.
        last_used:
          type: string
          description: |
            Date of last usage of a token. The accuracy is 5 minutes.
          format: date-time
        expiration_date:
          type: string
          description: Expiration date.
          format: date-time
        created_ts:
          type: string
          description: |
            Server-side timestamp of the token creation.
          format: date-time
      description: Personal Access Token Object.
      example:
        id: 806603def19d417d004a4b67e
        name: my_personal_token
        last_used: 2022-07-05T11:11:35.725Z
        expiration_date: 2023-10-16T07:28:34.725Z
        created_ts: 2022-07-05T11:03:27.725Z
    ErrorInternalAPI:
      type: object
      properties:
        error:
          type: string
          description: Description of the error.
      description: Error descriptor.
      example:
        error: internal error
    Settings:
      type: object
      description: User settings.
    Plan:
      required:
      - display_name
      - features
      - name
      type: object
      properties:
        name:
          type: string
          description: |
            Unique name of the plan.
        display_name:
          type: string
          description: |
            Short information about the plan.
        features:
          $ref: '#/components/schemas/Features'
      description: Plan descriptor.
      example:
        name: mender-enterprise
        display_name: Mender Enterprise
        features:
          rbac: true
          audit_logs: false
          dynamic_groups: false
          terminal: true
          file_transfer: true
          configuration: true
          monitoring: true
    Features:
      type: object
      properties:
        rbac:
          type: boolean
        audit_logs:
          type: boolean
        dynamic_groups:
          type: boolean
        terminal:
          type: boolean
        file_transfer:
          type: boolean
        configuration:
          type: boolean
        monitoring:
          type: boolean
        reporting:
          type: boolean
      description: Features descriptor.
      example:
        rbac: true
        audit_logs: false
        dynamic_groups: false
        terminal: true
        file_transfer: true
        configuration: true
        monitoring: true
        reporting: true
    PlanLimits:
      type: object
      properties:
        devices:
          type: integer
        users:
          type: integer
        audit_logs_days:
          type: integer
      description: Plan limits descriptor.
      example:
        devices: 10
        users: 2
        audit_logs_days: 2
    PlanBindingDetails:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
        limits:
          $ref: '#/components/schemas/PlanLimits'
      description: Combination of plan and limits objects.
      example:
        plan:
          product: Mender
          name: mender-enterprise
          display_name: Mender Enterprise
          features:
            rbac: true
            audit_logs: true
        limits:
          devices: 10
          users: 2
          audit_logs_days: 2
    TenantNew:
      type: object
      properties:
        tenant_id:
          type: string
          description: ID of given tenant.
      description: Tenant configuration.
      example:
        tenant_id: "1234"
  securitySchemes:
    Login:
      type: http
      scheme: basic
    ManagementJWT:
      $ref: './common/securitySchemes.yaml#/components/securitySchemes/ManagementJWT'
